import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * The Var class contains attributes and methods used on variables that are part of expressions.
 */
public class Var implements Expression {
    private String variable;

    /**
     * The Var method constructs a new Var instance.
     * @param s - the variable that represents the new instance.
     */
    public Var(String s) {
        this.variable = s;
    }

    /**
     * The evaluate method evaluates the value of an instance based on a map object key to value mapping.
     * @param assignment - a map instance of variable values.
     * @return - True or false after calculating the instance value.
     * @throws Exception
     */
    public Boolean evaluate(Map<String, Boolean> assignment) throws Exception {
        return assignment.get(this.variable);
    }

    /**
     * The evaluate method evaluates the truth value of an instance.
     * @return - The truth value of an instance.
     * @throws Exception
     */
    public Boolean evaluate() throws Exception {
        if (this.variable == "T") {
            return true;
        }
        if (this.variable == "F") {
            return false;
        } else {
            throw new Exception("Value is not true or false");
        }
    }
    /**
     * The toString method converts an instance to a string form.
     * @return - the string form of the instance.
     */
    public String toString() {
        return variable;
    }

    /**
     * The getVariables method generates a list of all the variables in an instance.
     * @return - a list of all the variables in an instance.
     */
    public List<String> getVariables() {
        List<String> variables = new ArrayList<>();
        variables.add(this.variable);
        return variables;
    }


    /**
     * The assign method replaces a variable with an Expression.
     * @param var - the variable that will be replaced.
     * @param expression - the expression that will replace the variable.
     * @return - a new expression generated by the replacement.
     */
    public Expression assign(String var, Expression expression) {
        if (this.variable == var) {
            return expression;
        } else {
           return this;
        }
    }

    /**
     * The nandify method returns the instance since nand is a binary operator and cannot be invoked on one element.
     * @return - this instance.
     */
    public Expression nandify() {
        return this;
    }

    /**
     * The norify method returns the instance since nor is a binary operator and cannot be invoked on one element.
     * @return - this instance.
     */
    public Expression norify() {
        return this;
    }

    /**
     * The simplify method returns the instance since a variable cannot be simplified.
     * @return - the calling instance.
     */
    public Expression simplify() {
        return this;
    }
}
