import java.util.List;
import java.util.Map;

/**
 * The Expression interface contains methods used on all expressions.
 */
public interface Expression {
    /**
     * The evaluate method calculates the truth value of the instance based on a mapping of variables and values.
     * @param assignment - a map instance of variables and values
     * @return - The truth value of the instance based on the mapping.
     * @throws Exception
     */
    Boolean evaluate(Map<String, Boolean> assignment) throws Exception;

    /**
     * The evaluate method calculates the truth value of the instance.
     * @return - The truth value of the instance.
     * @throws Exception
     */
    Boolean evaluate() throws Exception;

    /**
     * The getVariables method generates a list of all the variables in an instance.
     * @return - a list of all the variables in an instance.
     */
    List<String> getVariables();

    /**
     * The toString method converts the instance to a string form.
     * @return - the string form of the instance.
     */
    String toString();

    /**
     * The assign method replaces a variable with an Expression.
     * @param var - the variable that will be replaced.
     * @param expression - the expression that will replace the variable.
     * @return - a new expression generated by the replacement.
     */
    Expression assign(String var, Expression expression);
    /**
     * The nandify method converts an expression to a nand-only expression equal to the original expression.
     * @return - a nand-only expression equal to the original expression.
     */
    Expression nandify();
    /**
     * The norify method converts an expression to a nor-only expression equal to the original expression.
     * @return - a nor-only expression equal to the original expression.
     */
    Expression norify();

    /**
     * The simplify method generates a simplified version of an expression instance.
     * @return - a simplified expression instance
     */
    Expression simplify();
}
