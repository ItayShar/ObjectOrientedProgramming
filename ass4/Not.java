//208005587 Itay Sharfer
import java.util.List;
import java.util.Map;

/**
 * The Not class contains attributes and methods used on Not Expressions.
 */
public class Not extends UnaryExpression implements Expression {
    /**
     * The Not method constructs a new Not instance.
     * @param exp - an expression instance.
     */
    public Not(Expression exp) {
        super(exp);
    }

    /**
     * The evaluate method evaluates the value of an instance based on a map object key to value mapping.
     * @param assignment - a map instance with keys and values of the variables in the BaseExpression instance.
     * @return - Truth value of an instance based on the mapping.
     * @throws Exception
     */
    public Boolean evaluate(Map<String, Boolean> assignment) throws Exception {
        return (!this.exp.evaluate(assignment));
    }
    /**
     * The evaluate method evaluates the truth value of an instance.
     * @return - The truth value of an instance.
     * @throws Exception
     */
    public Boolean evaluate() throws Exception {
        return (!exp.evaluate());
    }
    /**
     * The getVariables method generates a list of all the variables in an instance.
     * @return - a list of all the variables in an instance.
     */
    public List<String> getVariables() {
        return exp.getVariables();
    }
    /**
     * The toString method converts an instance to a string form.
     * @return - the string form of the instance.
     */
    public String toString() {

        return ("~(" +  this.exp.toString() + ")");
    }

    /**
     * The assign method replaces a variable with an Expression.
     * @param var - the variable that will be replaced.
     * @param expression - the expression that will replace the variable.
     * @return - a new expression generated by the replacement.
     */
    public Expression assign(String var, Expression expression) {
        return new Not(this.exp.assign(var, expression));
    }

    /**
     * The nandify method converts an expression to a nand-only expression equal to the original expression.
     * @return - a nand-only expression equal to the original expression.
     */
    public Expression nandify() {
        return new Nand(this.exp.nandify(), this.exp.nandify());
    }

    /**
     * The norify method converts an expression to a nor-only expression equal to the original expression.
     * @return - a nor-only expression equal to the original expression.
     */
    public Expression norify() {
        return new Nor(this.exp.norify(), this.exp.norify());
    }

    /**
     * The simplify method returns the calling instance. There's no support for not expressions simplification in this
     * program.
     * @return - the calling instance.
     */
    public Expression simplify() {
        if (this.exp.toString() == "T") {
            return new Val(false);
        }
        if (this.exp.toString() == "F") {
            return new Val(true);
        }
        return this.simplify();
    }
}
